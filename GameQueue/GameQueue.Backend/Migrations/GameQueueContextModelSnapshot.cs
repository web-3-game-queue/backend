// <auto-generated />
using System;
using GameQueue.Backend.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GameQueue.Backend.Migrations
{
    [DbContext(typeof(GameQueueContext))]
    partial class GameQueueContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GameQueue.Core.Entities.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<int>("MaxPlayersCount")
                        .HasColumnType("integer")
                        .HasColumnName("max_players_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Unknown")
                        .HasColumnName("status");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id")
                        .HasName("pk_maps");

                    b.ToTable("maps", (string)null);
                });

            modelBuilder.Entity("GameQueue.Core.Entities.MapSearchRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatorUserId")
                        .HasColumnType("integer")
                        .HasColumnName("creator_user_id");

                    b.Property<int?>("MapId")
                        .HasColumnType("integer")
                        .HasColumnName("map_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_map_search_requests");

                    b.HasIndex("CreatorUserId")
                        .HasDatabaseName("ix_map_search_requests_creator_user_id");

                    b.HasIndex("MapId")
                        .HasDatabaseName("ix_map_search_requests_map_id");

                    b.ToTable("map_search_requests", (string)null);
                });

            modelBuilder.Entity("GameQueue.Core.Entities.RequestToMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MapId")
                        .HasColumnType("integer")
                        .HasColumnName("map_id");

                    b.Property<int>("SearchRequestId")
                        .HasColumnType("integer")
                        .HasColumnName("search_request_id");

                    b.HasKey("Id")
                        .HasName("pk_request_to_maps");

                    b.HasIndex("MapId")
                        .HasDatabaseName("ix_request_to_maps_map_id");

                    b.HasIndex("SearchRequestId")
                        .HasDatabaseName("ix_request_to_maps_search_request_id");

                    b.ToTable("request_to_maps", (string)null);
                });

            modelBuilder.Entity("GameQueue.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hashed_password");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GameQueue.Core.Entities.MapSearchRequest", b =>
                {
                    b.HasOne("GameQueue.Core.Entities.User", "CreatorUser")
                        .WithMany("SearchRequests")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_map_search_requests_users_creator_user_id");

                    b.HasOne("GameQueue.Core.Entities.Map", null)
                        .WithMany("SearchRequests")
                        .HasForeignKey("MapId")
                        .HasConstraintName("fk_map_search_requests_maps_map_id");

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("GameQueue.Core.Entities.RequestToMap", b =>
                {
                    b.HasOne("GameQueue.Core.Entities.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_request_to_maps_maps_map_id");

                    b.HasOne("GameQueue.Core.Entities.MapSearchRequest", "SearchRequest")
                        .WithMany("RequestsToMap")
                        .HasForeignKey("SearchRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_request_to_maps_map_search_requests_search_request_id");

                    b.Navigation("Map");

                    b.Navigation("SearchRequest");
                });

            modelBuilder.Entity("GameQueue.Core.Entities.Map", b =>
                {
                    b.Navigation("SearchRequests");
                });

            modelBuilder.Entity("GameQueue.Core.Entities.MapSearchRequest", b =>
                {
                    b.Navigation("RequestsToMap");
                });

            modelBuilder.Entity("GameQueue.Core.Entities.User", b =>
                {
                    b.Navigation("SearchRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
